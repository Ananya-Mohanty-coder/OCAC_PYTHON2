{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOh/GUEj6EipX2OGS5rbGK+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"source":["# Define the function\n","def double(num):\n","    \"\"\"Doubles the input number.\"\"\"  # Use triple quotes for docstrings\n","    return 2 * num  # Calculate and return the doubled value\n","\n","# Example usage\n","result = double(5)\n","print(result)"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j1LkmvN5s6_M","executionInfo":{"status":"ok","timestamp":1719307322684,"user_tz":-330,"elapsed":762,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"93f7b3a9-5cef-40dd-ffb0-f6ec89345d5b"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n"]}]},{"cell_type":"code","source":["print(double.__doc__)\n","# whatever the number you enter.... it just double the number"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CmXnemqbs-6W","executionInfo":{"status":"ok","timestamp":1719307384356,"user_tz":-330,"elapsed":798,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"69b70c1b-6f3d-4202-b942-2ef54b05502f"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Doubles the input number.\n"]}]},{"cell_type":"code","source":[" # Function Call --> Once we have defined a function, we can call it from anywhere\n","double(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tykmIEMrtMLO","executionInfo":{"status":"ok","timestamp":1719307432682,"user_tz":-330,"elapsed":5,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"4eb38cbf-79f1-43f3-9ae6-b2a4138dd702"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["20"]},"metadata":{},"execution_count":6}]},{"source":["def double(num):\n","    \"\"\"Doubles the input number.\"\"\"\n","    try:\n","        return 2 * int(num)  # Attempt to convert to integer and double\n","    except ValueError:\n","        return \"Invalid input. Please enter a number.\"  # Handle non-numeric input"],"cell_type":"code","metadata":{"id":"Kt1QzNFZuFtY","executionInfo":{"status":"ok","timestamp":1719307629970,"user_tz":-330,"elapsed":3,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}}},"execution_count":11,"outputs":[]},{"source":["result = double(125)\n","print(result)  # Output: 250"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OTO-oCQ_uWbi","executionInfo":{"status":"ok","timestamp":1719307695835,"user_tz":-330,"elapsed":689,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"0d487b97-b904-4bd8-f98d-37b7a307fd39"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["250\n"]}]},{"source":["def get_sum(numbers):\n","    \"\"\"Calculates the sum of a list of numbers.\"\"\"\n","    sum = 0\n","    for num in numbers:\n","        sum += num\n","    return sum\n","\n","result = get_sum([1, 2, 3, 4])\n","print(result)  # Output: 10"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1RapxSEvu3r9","executionInfo":{"status":"ok","timestamp":1719307833574,"user_tz":-330,"elapsed":741,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"9db7b9d7-6a65-4eda-d973-79f664bbeedb"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n"]}]},{"source":["def num_5_7(limit):\n","    \"\"\"Prints numbers divisible by 5 but not by 7 within a range.\"\"\"\n","    for num in range(1, limit):\n","        if num % 5 == 0 and num % 7 != 0:\n","            print(num)\n","\n","# Example usage:\n","num_5_7(50)"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SQUhfCASvLXt","executionInfo":{"status":"ok","timestamp":1719307913987,"user_tz":-330,"elapsed":958,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"3124966e-ea4b-4beb-cd40-0b95b3ea93e4"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","10\n","15\n","20\n","25\n","30\n","40\n","45\n"]}]},{"cell_type":"code","source":[" # Function Call --> Once we have defined a function, we can call it from anywhere\n","double(10.7)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zvDKIM5svON0","executionInfo":{"status":"ok","timestamp":1719307945930,"user_tz":-330,"elapsed":666,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"0b8b4b12-1535-4cbf-8772-4a54e95e1058"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["20"]},"metadata":{},"execution_count":22}]},{"source":["def sub(num1, num2):\n","    \"\"\"Subtracts num2 from num1.\"\"\"\n","    return num1 - num2\n","\n","result = sub(4, 2)  # Store the result in a variable\n","print(result)  # Output: 2"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ctBA6PaIvgpY","executionInfo":{"status":"ok","timestamp":1719307999756,"user_tz":-330,"elapsed":657,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"f0babea0-eab1-4233-d3c3-d1892cb65996"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["2\n"]}]},{"cell_type":"code","source":["def print_name(x):\n","  pass"],"metadata":{"id":"nTDcieXbviG0","executionInfo":{"status":"ok","timestamp":1719308046869,"user_tz":-330,"elapsed":761,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["print_name(\"siva\")\n"],"metadata":{"id":"US1i5Kuyvtzj","executionInfo":{"status":"ok","timestamp":1719308073602,"user_tz":-330,"elapsed":4,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}}},"execution_count":27,"outputs":[]},{"source":["numbers = [1, 2, 3, 4, 5]\n","even_sum = 0\n","odd_sum = 0\n","for i in numbers:\n","    if i % 2 == 0:\n","        even_sum = even_sum + i\n","    else:\n","        odd_sum = odd_sum + i\n","print(even_sum, odd_sum)"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gfFXoV1WwIC5","executionInfo":{"status":"ok","timestamp":1719308161507,"user_tz":-330,"elapsed":628,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"0a398699-ad59-4c40-a4db-51548224ffff"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["6 9\n"]}]},{"source":["# Define the function\n","def f_n(n):\n","    \"\"\"Calculates the sum of even and odd numbers up to n.\"\"\"\n","    even_sum = 0\n","    odd_sum = 0\n","    for i in range(1, n + 1):\n","        if i % 2 == 0:\n","            even_sum = even_sum + i  # Add to even_sum if even\n","        else:\n","            odd_sum = odd_sum + i  # Add to odd_sum if odd\n","    return even_sum, odd_sum  # Return both sums\n","\n","# Example usage:\n","even, odd = f_n(10)\n","print(\"Even sum:\", even)\n","print(\"Odd sum:\", odd)"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d3dpiMZOwjxn","executionInfo":{"status":"ok","timestamp":1719308278098,"user_tz":-330,"elapsed":1346,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"be3beca9-1559-4aac-8789-10452a4af16d"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Even sum: 30\n","Odd sum: 25\n"]}]},{"source":["def f_n(numbers):\n","    \"\"\"Calculates the sum of even and odd numbers in a list.\"\"\"\n","    even_sum = 0\n","    odd_sum = 0\n","    for i in numbers:\n","        if i % 2 == 0:\n","            even_sum = even_sum + i  # Add to even_sum if even\n","        else:\n","            odd_sum = odd_sum + i  # Add to odd_sum if odd\n","    return even_sum, odd_sum  # Return both sums\n","\n","# Function Call\n","even, odd = f_n([1, 2, 3, 4, 5])\n","print(\"Even sum:\", even)\n","print(\"Odd sum:\", odd)"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fkyy73Anw493","executionInfo":{"status":"ok","timestamp":1719308361467,"user_tz":-330,"elapsed":778,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"f5bec714-6e59-4355-ef54-5117144cacb8"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Even sum: 6\n","Odd sum: 9\n"]}]},{"cell_type":"markdown","source":["#Function Arguments\n"],"metadata":{"id":"Sf6yiMPhxC7F"}},{"source":["def greet(name, msg):\n","    \"\"\"Greets a person with a message.\"\"\"\n","    print(\"Hello {}, {}\".format(name, msg))\n","\n","# Call the function with arguments\n","greet(\"satish\", \"Good Morning\")"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nAICG6CAxQsX","executionInfo":{"status":"ok","timestamp":1719308461502,"user_tz":-330,"elapsed":701,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"e0bd94e6-4694-460e-affa-b0dcad51c229"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello satish, Good Morning\n"]}]},{"cell_type":"code","source":["#suppose if we pass one argument\n","greet(\"satish\") #will get an error\n","TypeError\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":182},"id":"4XQKsQcNxUP-","executionInfo":{"status":"error","timestamp":1719308517927,"user_tz":-330,"elapsed":740,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"87383dfb-bcc5-48a2-e708-0ae225e0f384"},"execution_count":39,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"greet() missing 1 required positional argument: 'msg'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-39-b076270b1578>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#suppose if we pass one argument\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mgreet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"satish\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#will get an error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: greet() missing 1 required positional argument: 'msg'"]}]},{"cell_type":"markdown","source":["#Different Forms of Arguments\n","1. Function with No Arguments\n"],"metadata":{"id":"TKcVPn-Ax35z"}},{"cell_type":"code","source":["def even_num():\n","    lb = int(input('enter lower bound values: '))\n","    ub = int(input('enter upper bound values: '))\n","    for i in range(lb, ub + 1):\n","        if i % 2 == 0:\n","            print(i, end=\" \")"],"metadata":{"id":"aNh5Qd5jyAIA","executionInfo":{"status":"ok","timestamp":1719308689235,"user_tz":-330,"elapsed":770,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["def even_num(lower, upper):\n","    for i in range(lower, upper + 1):\n","        if i % 2 == 0:\n","            print(i, end=\" \")\n","\n","lower = int(input(\"Enter lower bound value: \"))\n","upper = int(input(\"Enter upper bound value: \"))\n","\n","even_num(lower, upper)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RZjG8RTUybI_","executionInfo":{"status":"ok","timestamp":1719309008294,"user_tz":-330,"elapsed":21574,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"ddeeb5dd-2abf-436d-cf08-930be03c701d"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter lower bound value: 2\n","Enter upper bound value: 50\n","2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 "]}]},{"cell_type":"markdown","source":["2.#Default Arguments\n","We can provide a default value to an argument by using the assignment operator (=).\n"],"metadata":{"id":"FBe5pTfrzfAj"}},{"source":["def greet(name, msg=\"Good Morning\"):\n","    print(\"Hello {}, {}\".format(name, msg)) # Indent this line\n","\n","greet(\"satish\", \"Good Night\")"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YTaB4ILwz56N","executionInfo":{"status":"ok","timestamp":1719309152390,"user_tz":-330,"elapsed":624,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"8fac6505-f2eb-48ab-ebb4-f4d78c153d0a"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello satish, Good Night\n"]}]},{"cell_type":"code","source":[" #with out msg argument\n","greet(\"satish\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZGVmPN7xz7mq","executionInfo":{"status":"ok","timestamp":1719309182520,"user_tz":-330,"elapsed":5,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"5e94a27e-1247-4695-a41f-d56815148630"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello satish, Good Morning\n"]}]},{"cell_type":"code","source":[" #with out msg argument\n","greet:(\"satish\")\n"],"metadata":{"id":"zUbO8CRZ0k6b","executionInfo":{"status":"ok","timestamp":1719309465696,"user_tz":-330,"elapsed":985,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}}},"execution_count":58,"outputs":[]},{"cell_type":"markdown","source":["#Keyword Arguments\n","kwargs allows you to pass keyworded variable length of arguments to a function. You should use **kwargs if you want to handle named arguments in a function\n"],"metadata":{"id":"adLL8B771UhP"}},{"source":["def greet (**kwargs):\n","    if kwargs:\n","        print(\"Hello {}, {}\".format(kwargs['name'], kwargs['msg'])) # Indent this line to create a code block within the if statement\n","greet (name=\"good\", msg=\"Good Morning\")"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RVdK8CSf1tks","executionInfo":{"status":"ok","timestamp":1719309626636,"user_tz":-330,"elapsed":643,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"7949fe3c-d485-43fe-bea5-4712194389d1"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello good, Good Morning\n"]}]},{"cell_type":"markdown","source":["#Arbitary Arguments\n","#raining\n","Sometimes, we do not know in advance the number of arguments that will be passed into a function.Python allows us to handle this kind of situation through function calls with arbitrary number of arguments.\n"],"metadata":{"id":"QoYsg37M11co"}},{"source":["def greet (*names):\n","    print(names) # Indent this line to create a code block within the function\n","    for name in names:\n","        print(\"Hello\") # Indent this line to create a code block within the for loop"],"cell_type":"code","metadata":{"id":"g3QKtOQH2Lem","executionInfo":{"status":"ok","timestamp":1719309750897,"user_tz":-330,"elapsed":926,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}}},"execution_count":62,"outputs":[]},{"cell_type":"code","source":["greet(\"satish\", \"murali\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d6RTTy0f2N7Z","executionInfo":{"status":"ok","timestamp":1719309793886,"user_tz":-330,"elapsed":643,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"5e7e7bf1-c502-42e9-b3c7-4b37d2d8442b"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["('satish', 'murali')\n","Hello\n","Hello\n"]}]},{"cell_type":"markdown","source":["#Recussive Function or Recurison\n","We know that in Python, a function can call other functions. It is even possible for the function to call itself. These type of construct are termed as recursive functions.\n"],"metadata":{"id":"DWxrRFem2jUT"}},{"source":["#python program to print factorial of a number using recurion\n","def factorial (num):\n","    if num==0:\n","        return 1 # Indent this line to be part of the 'if' block\n","    else:\n","        return num * factorial(num-1) # Indent this line to be part of the 'else' block and calculate the factorial recursively"],"cell_type":"code","metadata":{"id":"KwsBTcbN23Pr","executionInfo":{"status":"ok","timestamp":1719309927068,"user_tz":-330,"elapsed":788,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}}},"execution_count":65,"outputs":[]},{"cell_type":"code","source":["In [26]: num = 5\n","print(\"Factorial of {} is {}\".format(num, factorial (num)))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SpZhihMS24sp","executionInfo":{"status":"ok","timestamp":1719309961786,"user_tz":-330,"elapsed":1116,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"7fa4a919-9bc2-403d-d9ff-3b98defa1c64"},"execution_count":66,"outputs":[{"output_type":"stream","name":"stdout","text":["Factorial of 5 is 120\n"]}]},{"source":["def add(a, b):\n","    return a+b # Indent this line to be part of the 'add' function\n","def multiply(a, b):\n","    return a*b # Indent this line to be part of the 'multiply' function\n","def subtract(a, b):\n","    return a-b  # Indent this line to be part of the 'subtract' function\n","def division(a, b):\n","    return a/b # Indent this line to be part of the 'division' function\n","print(\"Select Option\")\n","print(\"1. Addition\")\n","print(\"2. Subtraction\")\n","print(\"3. Multiplication\")\n","print(\"4. Division\")\n","\n","# take input from user\n","choice = int(input(\"Enter choice 1/2/3/4: \"))\n","num1 = int(input(\"Enter first number: \"))\n","num2 = int(input(\"Enter second number: \"))\n","\n","if choice == 1:\n","    # Addition\n","    result = num1 + num2\n","    print(f\"The sum of {num1} and {num2} is {result}\")\n","elif choice == 2:\n","    # Subtraction\n","    result = num1 - num2\n","    print(f\"The difference of {num1} and {num2} is {result}\") # Complete the 'elif' block to print the result of subtraction\n","elif choice == 3:\n","    # Multiplication\n","    result = num1 * num2\n","    print(f\"The product of {num1} and {num2} is {result}\") # Add an 'elif' block to handle multiplication\n","elif choice == 4:\n","    # Division\n","    result = num1 / num2\n","    print(f\"The quotient of {num1} and {num2} is {result}\") # Add an 'elif' block to handle division\n","else:\n","    print(\"Invalid Input\") # Add an 'else' block to handle invalid choices"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mjtI1Oq83mJG","executionInfo":{"status":"ok","timestamp":1719310134198,"user_tz":-330,"elapsed":15213,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"d81e9a89-346a-4e87-9f6e-545f091d2191"},"execution_count":69,"outputs":[{"output_type":"stream","name":"stdout","text":["Select Option\n","1. Addition\n","2. Subtraction\n","3. Multiplication\n","4. Division\n","Enter choice 1/2/3/4: 4\n","Enter first number: 1\n","Enter second number: 2\n","The quotient of 1 and 2 is 0.5\n"]}]}]}