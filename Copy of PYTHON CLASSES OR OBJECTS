{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1_oBvSLRmYAIllFPsjmjqgHalUKqOsfD-","timestamp":1719316050731}],"authorship_tag":"ABX9TyPc5EKenED5kWPEpfZw5cvX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#Python Classes/Objects\n","Python is an object oriented programming language ( OOP ).\n","Almost everything in Python is an object, with its properties and methods.\n","A Class is like an object constructor, or a \"blueprint\" for creating objects."],"metadata":{"id":"YFwsp_sF4gPN"}},{"source":["#Create Class\n","class MyClass:\n","    x = 5 # Indent this line to make it part of the class\n","    print(\"Hello Ankit\",x)"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CqAuQ7fS4-5C","executionInfo":{"status":"ok","timestamp":1719310483034,"user_tz":-330,"elapsed":609,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"b1a63543-52f4-4d8d-b707-0905f2177a2b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello Ankit 5\n"]}]},{"cell_type":"code","source":["#create object, Create an object named p1, and print the value of x:\n","p1 = MyClass()\n","print(p1.x)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XHE8LUNS5AoU","executionInfo":{"status":"ok","timestamp":1719310515749,"user_tz":-330,"elapsed":721,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"87bcc4a3-d41d-42c7-8310-4c95f7758305"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n"]}]},{"cell_type":"code","source":["y=MyClass()\n","print(y.x)\n","print(type(y))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WDx9DacQ5JNl","executionInfo":{"status":"ok","timestamp":1719310538332,"user_tz":-330,"elapsed":598,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"5ec6c1e1-92d8-48a2-a2fe-ab42ede0a28a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","<class '__main__.MyClass'>\n"]}]},{"source":["class Students:\n","    print(\"Hello Amit\")  # Indent this line to be part of the class\n","z = Students()\n","print(type(z))"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vrGimtHn5f2r","executionInfo":{"status":"ok","timestamp":1719310618063,"user_tz":-330,"elapsed":595,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"e57fdb52-a8c2-427a-b473-24c96960dd68"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello Amit\n","<class '__main__.Students'>\n"]}]},{"source":["class Student:\n","    def func(): # Indent this line to be part of the class\n","        print(\"Hello, Welcome to OCAC\")\n","\n","Student.func()"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-dQZwmVr5urc","executionInfo":{"status":"ok","timestamp":1719310678770,"user_tz":-330,"elapsed":785,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"8d25db3c-f1da-40e9-c5aa-cfc2895c871c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Welcome to OCAC\n"]}]},{"source":["class Student:\n","    year = 2021  # Indent this line to be part of the class definition\n","\n","    def func(self):\n","        print(\"Hello, Welcome to OCAC\", self.year)\n","\n","x = Student()\n","x.func()"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8WiNO7-V57AK","executionInfo":{"status":"ok","timestamp":1719310728762,"user_tz":-330,"elapsed":539,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"d141a8cd-eb97-4944-f95c-62f91fa06056"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Welcome to OCAC 2021\n"]}]},{"cell_type":"code","source":["Student.func()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":146},"id":"hmHqz1ip58nd","executionInfo":{"status":"error","timestamp":1719310751449,"user_tz":-330,"elapsed":506,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"498db17a-f483-420d-dd80-f2a45f877d5f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"Student.func() missing 1 required positional argument: 'self'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-c8adef7bebfb>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mStudent\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: Student.func() missing 1 required positional argument: 'self'"]}]},{"cell_type":"markdown","source":["#Class Object Attribute\n","\n","Note: The init() function is called\n","automatically every time the class is\n","being used to create a new object."],"metadata":{"id":"tWfKk4tK6JKp"}},{"source":["class Person:\n","    def __init__(self, name, age):\n","        self.name = name\n","        self.age = age\n","\n","    def myfunc(self):\n","        print(\"Hello my name is \" + self.name)\n","\n","p1 = Person(\"John\", 36)\n","p1.myfunc() # Call the function using the correct name"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lxS8SCCn6w3l","executionInfo":{"status":"ok","timestamp":1719310950820,"user_tz":-330,"elapsed":487,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"5a541b92-356a-49a8-8fa5-b6e3a15375b1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello my name is John\n"]}]},{"source":["class Student:\n","    def __init__(self,name):\n","        self.name = name\n","elon = Student(name='Elon Musk!')\n","champ = Student(name=\"I am Champ\")\n","print(elon.name)\n","print(champ.name)"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KWiBqT1Z8plH","executionInfo":{"status":"ok","timestamp":1719311445909,"user_tz":-330,"elapsed":527,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"63e3f297-ea5b-4738-8962-1cc84c3f929a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Elon Musk!\n","I am Champ\n"]}]},{"source":["class Person:\n","    def __init__(self, name, age):\n","\n","        self.name = name\n","        self.age = age\n","p1 = Person(\"John\", 36)\n","print(p1.name)\n","print(p1.age)"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qv5Y0oWI88EO","executionInfo":{"status":"ok","timestamp":1719311521578,"user_tz":-330,"elapsed":613,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"b1aeea41-cdbd-4f90-b597-68c212fe43e6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["John\n","36\n"]}]},{"source":["class Student:\n","    Total = 500 # Class variable\n","    def __init__(self, marks):\n","        self.marks = marks # Corrected the assignment\n","        print(\"Initialized...\")\n","    def findLoss(self):\n","        return self.Total - self.marks # Corrected the expression\n","    def findPercentage(self):\n","        return (self.marks / self.Total) * 100 # Corrected the expression\n","a = Student(marks=458)\n","print(\"Total Marks:\", a.Total)\n","print('Lost Marks:', a.findLoss()) # Corrected the typo in the string\n","print('Percentage is:', a.findPercentage()) # Added missing closing parenthesis"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BVC2OMx89mCv","executionInfo":{"status":"ok","timestamp":1719311692426,"user_tz":-330,"elapsed":543,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"531f9e81-b214-4396-d701-a5d1d21d55c1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Initialized...\n","Total Marks: 500\n","Lost Marks: 42\n","Percentage is: 91.60000000000001\n"]}]},{"cell_type":"markdown","source":["# Example to Illustrate:\n","Let's walk through an example where an instance of the Student class is created.\n","#Class Definition:\n","class Student:\n"," def __init__(self, marks):\n"," self.marks = marks # Instance variable\n"," print(\"Initialized...\")\n","#Creating an Instance:\n","a = Student(marks=458)\n","When Student(marks=458) is executed, the __init__ method is called. The instance a is passed as the self parameter to the __init__ method. The value 458 is passed as the marks parameter.\n","Execution of __init__ :\n","self refers to the instance a .\n","self.marks = marks assigns the value 458 to the instance variable marks of a .\n","Breakdown of self.marks = marks :\n","self.marks :\n","This accesses the marks attribute of the instance referred to by self (which is a ).\n","= marks :\n","This assigns the value of the parameter marks (which is 458 ) to\n","self.marks .\n","#Visual Representation:\n","Imagine self is a placeholder for the instance a :\n","self.marks becomes a.marks .\n","marks is the value 458 .\n","So, effectively, the line self.marks = marks is doing:\n","a.marks = 458 .\n","Summary\n","#First self (in the method definition): It represents the instance of the class that is being created.\n","#Second self (in the method body): It is used to assign the value of the marks parameter to the instance variable marks of the current instance.\n","The use of self ensures that the marks value is stored uniquely in each instance of the Student class. This allows each student to have their own marks value without interfering with other instances.\n"],"metadata":{"id":"G_TmEKbw-t6W"}},{"source":["class Student:\n","    Total = 500 # Class variable\n","    def __init__(self, name, marks,gender):\n","        self.name=name\n","        self.marks=marks\n","        self.gender=gender\n","        print(\"Initialized...\")\n","    def __len__(self):\n","        return self.marks\n","    def __str__(self):\n","        return \"Name: %s | Marks: %s | Gender: %s\" %(self.name,self.marks,self.gender) # fix typo self.g -> self.gender\n","    def __del__(self):\n","        print(\"Student Database is Deleted\")\n","a = Student('champ', 450, 'male')\n","print(a)\n","print('Marks: ',len(a))\n","del a"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rxsxVgSCAQOQ","executionInfo":{"status":"ok","timestamp":1719312390476,"user_tz":-330,"elapsed":960,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"cffc7b0a-dd40-4e54-d4a4-98fd8bc78c1b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Initialized...\n","Name: champ | Marks: 450 | Gender: male\n","Marks:  450\n","Student Database is Deleted\n"]}]},{"source":["student = {\n","    \"Name\": \"champ\",\n","    \"Marks\": 450,\n","    \"Gender\": \"male\"\n","}\n","\n","del student\n","\n","print(\"Student Database is Deleted\")\n","class Student:\n","    Total = 500 # Class variable\n","    def __init__(self, name, marks,gender):\n","        self.name=name\n","        self.marks=marks\n","        self.gender=gender\n","        print(\"Initialized...\")\n","    def __len__(self):\n","        return self.marks\n","    def __str__(self):\n","        return \"Name: %s | Marks: %s | Gender: %s\" %(self.name,self.marks,self.gender) # fix typo self.g -> self.gender\n","\n","    def __del__(self):\n","        print('Student Database is Deleted') # Indent this line to be part of the class"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U2zrVTliAjtX","executionInfo":{"status":"ok","timestamp":1719312469388,"user_tz":-330,"elapsed":788,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"2a45b56b-5d50-4eba-a312-21a277b61958"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Student Database is Deleted\n"]}]},{"source":["class Student:\n","    Total = 500 # Class variable\n","    def __init__(self, marks): # Fix indentation\n","        self.marks = marks\n","        print(\"Initialized...\")\n","    def mul(self): # Fix indentation\n","        return self.marks * self.Total\n","p1 = Student(300)\n","p1.mul()"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vC1EXmYsA0u4","executionInfo":{"status":"ok","timestamp":1719312540613,"user_tz":-330,"elapsed":10,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"b93d6063-b68d-4cc3-bb76-e0deba427ccc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Initialized...\n"]},{"output_type":"execute_result","data":{"text/plain":["150000"]},"metadata":{},"execution_count":32}]},{"source":["class Student:\n","    Total = 500 # Class variable\n","    def __init__(self, name, marks,gender):\n","        self.name=name\n","        self.marks=marks\n","        self.gender=gender\n","        print(\"Initialized...\")\n","    def __len__(b):\n","        return b.marks\n","a = Student('champ', 450, 'male')\n","print(a)\n","print('Marks: ',len(a))"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z5npYF8oBFNk","executionInfo":{"status":"ok","timestamp":1719312606082,"user_tz":-330,"elapsed":496,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"bf58a1d9-c0ae-48a6-d379-874bd28f8454"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Initialized...\n","<__main__.Student object at 0x799f30136a10>\n","Marks:  450\n"]}]},{"cell_type":"markdown","source":["#Class Definition:\n","class Student:\n","Total = 500 # Class variable\n","This defines a class named Student .\n","Total = 500 is a class variable shared among all instances of the Student class.\n","It represents a fixed total marks value for all students.\n","Initializer ( __init__ method):\n","def __init__(self, name, marks, gender):\n","self.name = name\n","self.marks = marks\n","self.gender = gender\n","print(\"Initialized...\")\n","\n","This is the initializer method that gets called when a new instance of the Student\n","class is created.\n","It takes three parameters in addition to self : name , marks , and gender .\n","It initializes the instance variables self.name , self.marks , and self.gender\n","with the provided values.\n","It prints \"Initialized...\" when a new Student object is created.\n","__len__ Method:\n","def __len__(self):\n","#return self.marks\n","This is a special method that allows the use of the len() function on Student\n","objects.\n","It returns the marks of the student, meaning when you call len(a) , it returns\n","a.marks .\n","__str__ Method:\n","def __str__(self):\n","return \"Name: %s | Marks: %s | Gender: %s\" % (self.name,\n","self.marks, self.gender)\n","This is a special method that defines the string representation of the Student\n","object.\n","When you print a Student object, it returns a formatted string showing the name,\n","marks, and gender of the student.\n","__del__ Method:\n","def __del__(self):\n","print(\"Student Database is Deleted\")\n","This is a special method called a destructor that gets called when an object is about\n","to be destroyed (when del is used or when the object goes out of scope).\n","It prints \"Student Database is Deleted\" when the Student object is deleted.\n","#Creating and Using a Student Object:\n","a = Student('champ', 450, 'male')\n","This creates a new Student object with the name 'champ', marks 450, and gender\n","'male'.\n","It calls the __init__ method, which initializes the object and prints \"Initialized...\".\n","#Printing the Student Object:\n","print(a)\n","\n","This calls the __str__ method and prints the string representation of the\n","Student object:\n","Name: champ | Marks: 450 | Gender: male\n","Getting the Length of the Student Object:\n","print('Marks: ', len(a))\n","This calls the __len__ method and prints the marks of the student:\n","Marks: 450\n","#Deleting the Student Object:\n","del a\n","This calls the __del__ method and deletes the Student object, printing:\n","Student Database is Deleted\n","This code demonstrates the use of special methods in Python to customize the behavior\n","of objects for initialization, string representation, length calculation, and object deletion.\n","\n","#The self Parameter\n","The self parameter is a reference to the current instance of the class, and is used to\n","access variables that belongs to the class.\n","It does not have to be named self , you can call it whatever you like, but it has to be the\n","first parameter of any function in the class:"],"metadata":{"id":"yxNa2IgvBX9u"}},{"source":["class Person:\n","    def __init__(mysillyobject, name, age):\n","        mysillyobject.name = name\n","        mysillyobject.age = age\n","    def myfunc(abc):\n","        print(\"Hello my name is \" + abc.name + \" \" + str(abc.age)) # Fix concatenation and convert age to string\n","\n","p1 = Person(\"John\", 36)\n","p1.myfunc() # Call the method on the object"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zBfsqNiuB4MS","executionInfo":{"status":"ok","timestamp":1719312819903,"user_tz":-330,"elapsed":659,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"787ae8bf-cdc6-470b-e111-454bc76b7095"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello my name is John 36\n"]}]},{"cell_type":"code","source":["#Modify Object Properties\n","#Set the age of p1 to 40\n","\n","p1.age = 40\n","p1.myfunc()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CcoUf08DB7I2","executionInfo":{"status":"ok","timestamp":1719312862223,"user_tz":-330,"elapsed":821,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"52213486-73ea-43f6-d9c4-56ac51bd3702"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello my name is John 40\n"]}]},{"cell_type":"markdown","source":["Delete Object Properties\n"],"metadata":{"id":"-kTP_MQ1CRAC"}},{"cell_type":"code","source":["# Delete Object Properties\n","# Delete the age property from the p1 object:\n","del p1[\"age\"]\n","p1.myfunc() # This line was missing a closing parenthesis"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":200},"id":"wdQv7oZKCQZq","executionInfo":{"status":"error","timestamp":1719313012060,"user_tz":-330,"elapsed":608,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"dc1e96b9-645c-4372-ea8d-6f5b12a63615"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"'Person' object does not support item deletion","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-40-d6d17a5413df>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Delete Object Properties\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# Delete the age property from the p1 object:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mdel\u001b[0m \u001b[0mp1\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"age\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mp1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmyfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# This line was missing a closing parenthesis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'Person' object does not support item deletion"]}]},{"cell_type":"markdown","source":["#The pass Statement\n","class definitions cannot be empty, but if you for some reason have a class definition with\n","no content, put in the pass statement to avoid getting an error.\n","class Person:\n","pass\n","# having an empty class definition like this, would raise an error without the p\n","\n","Create a Parent Class"],"metadata":{"id":"1gNhwLRSCshg"}},{"cell_type":"markdown","source":["firstname and lastname properties, and a prin\n","class Person:\n","def __init__(self, fname, lname):\n","self.firstname = fname\n","self.lastname = lname\n","def printname(self):\n","print(self.firstname, self.lastname)\n","#Use the Person class to create an object, and then execute the printname method\n","x = Person(\"John\", \"Doe\")\n","x.printname()\n","John Doe\n","#Create a Child Class\n","To create a class that inherits the functionality from another class, send the #parent class\n","as a parameter when creating the child class:\n","#Create a class named Student, which will inherit the properties and methods fro\n","#class Student(Person):\n","pass\n","#Note: Use the pass keyword when you do not want to add any other properties or\n","#Now the Student class has the same properties and methods as the Person class.\n","#Use the Student class to create an object, and then execute the printname metho\n","x = Student(\"Mike\", \"Olsen\")\n","x.printname()\n","Mike Olsen\n","Add the init() Function\n","So far we have created a child class that inherits the properties and methods from its\n","parent.\n","We want to add the init() function to the child class (instead of the pass keyword).\n","Note: The init() function is called automatically every time the class is being used to\n","create a new object.\n","#Add the __init__() function to the Student class:\n","class Student(Person):\n","def __init__(self, fname, lname):\n","pass\n","#add properties etc\n","\n","When you add the __init__() function, the child class will no longer inherit the parent's __init__() function. Note: The child's\n","__init__() function overrides the inheritance of the parent's __init__() function. zw To keep the inheritance of the parent's\n","__init__()"],"metadata":{"id":"urA-dIthDbtV"}},{"source":["class Person:\n","    def __init__(self, fname, lname):\n","        self.firstname = fname  # Initialize firstname attribute in Person class\n","        self.lastname = lname\n","\n","class Student(Person):\n","    def __init__(self, fname, lname, major):\n","        Person.__init__(self, fname, lname)  # Properly call Person's constructor\n","        self.major = major\n","\n","    def print_info(self):\n","        print(self.firstname, self.lastname, \"-\", self.major)  # Now you can access self.firstname\n","\n","x = Student(\"Mike\", \"Olsen\", \"Computer Science\")\n","x.print_info()"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BBO5Jye1E2g0","executionInfo":{"status":"ok","timestamp":1719313595571,"user_tz":-330,"elapsed":460,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"dfedb4fb-2ba0-4538-adeb-0c816d4904e5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mike Olsen - Computer Science\n"]}]},{"cell_type":"markdown","source":["\n","#Use the super() Function\n","Python also has a super() function that will make the child class inherit all the methods\n","and properties from its parent:\n","class Student(Person):\n","def __init__(self, fname, lname):\n","super().__init__(fname, lname)\n","#By using the super() function, you do not have to use the name of the parent el\n","\n","#Add Properties"],"metadata":{"id":"iuix7zaYFEo_"}},{"source":["class Person:\n","    def __init__(self, fname, lname): # Indent the __init__ method\n","        self.firstname = fname\n","        self.lastname = lname\n","    def printname(self): # Indent the printname method\n","        print(self.firstname, self.lastname)\n","\n","class Student(Person):\n","    def __init__(self, fname, lname):\n","        super().__init__(fname, lname)\n","        self.graduationyear = 2019\n","\n","x = Student(\"Mike\", \"Olsen\")\n","print(x.graduationyear)\n","x.printname()"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oM83NFPdFik-","executionInfo":{"status":"ok","timestamp":1719313775128,"user_tz":-330,"elapsed":510,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"4d1d397e-a570-42d8-dc12-6414ac695f78"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2019\n","Mike Olsen\n"]}]},{"source":["class Person:\n","    def __init__(self, fname, lname):\n","        self.firstname = fname\n","        self.lastname = lname\n","\n","    def printname(self):\n","        print(self.firstname, self.lastname)\n","\n","class Student(Person):\n","    def __init__(self, fname, lname, year):\n","        super().__init__(fname, lname)\n","        self.graduationyear = year\n","\n","x = Student(\"Mike\", \"Olsen\", 2019)\n","print(x.graduationyear)"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sM6M0HKqGXim","executionInfo":{"status":"ok","timestamp":1719313992041,"user_tz":-330,"elapsed":547,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"443101c8-7ea0-47bd-c8a9-667bcd82590f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2019\n"]}]},{"cell_type":"markdown","source":["#Add Methods"],"metadata":{"id":"lfgWyojpGged"}},{"source":["class Person:\n","    def __init__(self, fname, lname):\n","        self.firstname = fname\n","        self.lastname = lname\n","\n","    def printname(self):\n","        print(self.firstname, self.lastname) # Indent this line\n","\n","class Student(Person):\n","    def __init__(self, fname, lname, year):\n","        super().__init__(fname, lname)\n","        self.graduationyear = year\n","\n","    def welcome(self):\n","        print(\"Welcome\", self.firstname, self.lastname, \"to the class of\", self.graduationyear) # Fix typo here\n","\n","x = Student(\"Mike\", \"Olsen\", 2019)\n","x.welcome()"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fULTnA6JG-49","executionInfo":{"status":"ok","timestamp":1719314153015,"user_tz":-330,"elapsed":442,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"79a2d6d9-d7d9-4056-aabf-ff1d384beaa9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Welcome Mike Olsen to the class of 2019\n"]}]},{"cell_type":"markdown","source":["#Inheritance - Help to reduce complexity of the program.\n","\n","\n","#Python Inheritance\n","Inheritance allows us to define a class that inherits all the methods and properties from\n","#another class.\n","Parent class is the class being inherited from, also called base class.\n","Child class is the class that inherits from another class, also called derived class.\n","#Base Class & Derived Class:\n","class Elon:\n","def __init__(self):\n","print(\"Profile created\")\n"],"metadata":{"id":"b4EmXa7wHMqy"}},{"source":["class Elon:\n","    def __init__(self): # Indent all methods within the class\n","        print(\"Profile created\")\n","    def name(self):\n","        print(\"Elon Musk\")\n","    def age(self):\n","        print(\"40\")"],"cell_type":"code","metadata":{"id":"6vZmowklHuvJ"},"execution_count":null,"outputs":[]},{"source":["class SpaceX(Elon):\n","    def __init__(self):  # Indent this line\n","        super().__init__() # Correctly call the parent class's initializer\n","        print(\"Company Profile created\")\n","    def name(self):  # Indent this line\n","        print(\"SpaceX\")\n","    def type(self):  # Indent this line\n","        print(\"Private Space travel\")"],"cell_type":"code","metadata":{"id":"HywsW-C-H-XY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Creating an instance of the SpaceX class\n","spacex_profile = SpaceX()\n","# Calling methods on the instance\n","spacex_profile.name()\n","spacex_profile.age()\n","spacex_profile.type()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AAuoTUqtIAeY","executionInfo":{"status":"ok","timestamp":1719314441793,"user_tz":-330,"elapsed":545,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"2e0eed6e-e121-4459-f5a5-1440d5d8d6ed"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Profile created\n","Company Profile created\n","SpaceX\n","40\n","Private Space travel\n"]}]},{"cell_type":"code","source":["a = SpaceX()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"erwYRCahIIAk","executionInfo":{"status":"ok","timestamp":1719314471180,"user_tz":-330,"elapsed":627,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"94a0a3a1-d8f1-4566-b310-f4543ee136ff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Profile created\n","Company Profile created\n"]}]},{"cell_type":"markdown","source":["#Class Definitions\n","1. Class Elon :\n","class Elon:\n","def __init__(self):\n","print(\"Profile created\")\n","def name(self):\n","print(\"Elon Musk\")\n","def age(self):\n","print(\"40\")\n","__init__ method: This constructor method prints \"Profile created\" when an\n","instance of Elon is created.\n","name method: This method prints \"Elon Musk\".\n","age method: This method prints \"40\".\n","2. Class SpaceX (inherits from Elon ):\n","\n","In [103...\n","\n","In [105...\n","\n","In [107...\n","\n","class SpaceX(Elon):\n","def __init__(self):\n","super().__init__() # Correctly call the parent class's\n","initializer\n","print(\"Company Profile created\")\n","def name(self):\n","print(\"SpaceX\")\n","def type(self):\n","print(\"Private Space travel\")\n","__init__ method:\n","Calls the parent class ( Elon ) __init__ method using\n","super().__init__() , which prints \"Profile created\".\n","Then prints \"Company Profile created\".\n","name method: This method overrides the name method from the Elon\n","class and prints \"SpaceX\".\n","type method: This new method prints \"Private Space travel\".\n","Creating an Instance and Calling Methods\n","# Creating an instance of the SpaceX class\n","spacex_profile = SpaceX()\n","An instance of SpaceX is created, which triggers the __init__ method of\n","SpaceX .\n","The __init__ method of SpaceX first calls the __init__ method of Elon ,\n","printing \"Profile created\".\n","Then it prints \"Company Profile created\".\n","# Calling methods on the instance\n","spacex_profile.name() # This will call the overridden name method in\n","SpaceX\n","spacex_profile.age() # This will call the age method inherited from\n","Elon\n","spacex_profile.type() # This will call the type method in SpaceX\n","spacex_profile.name() : Calls the overridden name method in SpaceX , which\n","prints \"SpaceX\".\n","spacex_profile.age() : Calls the age method inherited from Elon , which\n","prints \"40\".\n","spacex_profile.type() : Calls the type method in SpaceX , which prints\n","\"Private Space travel\".\n","Summary\n","Here's the complete code with comments and expected output:\n","class Elon:\n","def __init__(self):\n","print(\"Profile created\")\n","\n","def name(self):\n","print(\"Elon Musk\")\n","def age(self):\n","print(\"40\")\n","class SpaceX(Elon):\n","def __init__(self):\n","super().__init__() # Correctly call the parent class's\n","initializer\n","print(\"Company Profile created\")\n","def name(self):\n","print(\"SpaceX\")\n","def type(self):\n","print(\"Private Space travel\")\n","# Creating an instance of the SpaceX class\n","spacex_profile = SpaceX()\n","# Output:\n","# Profile created\n","# Company Profile created\n","# Calling methods on the instance\n","spacex_profile.name()\n","# Output: SpaceX\n","spacex_profile.age()\n","# Output: 40\n","spacex_profile.type()\n","# Output: Private Space travel\n","Explanation of Inheritance\n","Inheritance: SpaceX inherits from Elon , meaning it has access to the methods\n","and attributes of Elon .\n","#Overriding: The name method in SpaceX overrides the name method in Elon ,\n","providing a different implementation.\n","Super Function: super().__init__() in SpaceX ensures that the __init__\n","method of the parent class ( Elon ) is called, initializing the parent class properly\n","before adding additional initialization for SpaceX .\n","This code demonstrates how inheritance allows for extending and customizing the\n","behavior of parent classes in derived classes.\n","\n","#Polimorphism\n","class Elon:\n","def __init__(self, name):\n","self.name = name In [111...\n","\n","def type(self):\n","return \"Entrepreneur\"\n","class Sundar:\n","def __init__(self, name):\n","self.name = name\n","def type(self):\n","return \"CEO\"\n","# Creating instances of Elon and Sundar\n","person1 = Elon('Elon Musk')\n","person2 = Sundar('Sundar Pichai')\n","# Function to demonstrate polymorphism\n","def print_person_type(person):\n","print(f\"{person.name} is a {person.type()}\")\n","# Calling the function with different objects\n","print_person_type(person1)\n","print_person_type(person2)\n","Elon Musk is a Entrepreneur\n","Sundar Pichai is a CEO\n","#Polymorphism allows different classes to have methods with the same name that can becalled in a unified manner.\n","The provided code defines two classes, Elon and Sundar , and demonstrates the\n","concept of polymorphism in Python. Let's break down each part:\n","Class Definitions\n","1. Class Elon :\n","class Elon:\n","def __init__(self, name):\n","self.name = name\n","def type(self):\n","return \"Entrepreneur\"\n","__init__ method: This is the constructor method that initializes an instance\n","of the class with a name attribute.\n","type method: This method returns the string \"Entrepreneur\".\n","2. Class Sundar :\n","class Sundar:\n","def __init__(self, name):\n","self.name = name\n","def type(self):\n","return \"CEO\"\n","__init__ method: This is the constructor method that initializes an instance\n","of the class with a name attribute.\n","type method: This method returns the string \"CEO\".\n","\n","#Creating Instances\n","person1 = Elon('Elon Musk')\n","person2 = Sundar('Sundar Pichai')\n","person1 : An instance of the Elon class with the name attribute set to \"Elon\n","Musk\".\n","person2 : An instance of the Sundar class with the name attribute set to \"Sundar\n","Pichai\".\n","#Polymorphism Demonstration\n","def print_person_type(person):\n","print(f\"{person.name} is a {person.type()}\")\n","print_person_type function: This function takes an object person as an\n","argument and prints the person's name along with their type.\n","The function uses the name attribute and the type method of the person\n","object.\n","#Function Calls\n","print_person_type(person1)\n","print_person_type(person2)\n","The function print_person_type is called with person1 (an instance of Elon )\n","nd person2 (an instance of Sundar ).\n","Output\n","The output of the function calls will be:\n","Elon Musk is a Entrepreneur\n","Sundar Pichai is a CEO\n","Explanation of Polymorphism\n","Polymorphism allows objects of different classes to be treated as objects of a common\n","#superclass. In this case:\n","Both Elon and Sundar classes have a type method.\n","The print_person_type function calls the type method on any object passed\n","to it, regardless of whether it's an instance of Elon or Sundar .\n","This demonstrates polymorphism because the function can operate on objects of\n","different classes, provided they have the expected method ( type ).\n","In summary, the code demonstrates polymorphism by defining a function that can\n","accept objects of different classes and call a common method ( type ) on them. This\n","allows for flexible and reusable code.\n","\n","Use one function directly in a Class\n","To use one function from a class directly, you can use the staticmethod or\n","classmethod decorators if you don't need to create an instance of the class. Here's a\n","guide to both methods:\n","Using staticmethod\n","If the method doesn't require access to instance ( self ) or class ( cls ) attributes, you\n","can use staticmethod"],"metadata":{"id":"Uf2omy5EI6NH"}},{"source":["class MyClass:\n","    @staticmethod\n","    def my_function(arg1, arg2):\n","        return arg1 + arg2\n","\n","# You can call it directly using the class name\n","result = MyClass.my_function(1, 2)\n","print(result) # Output: 3"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fwHkOnwWJo8t","executionInfo":{"status":"ok","timestamp":1719314850746,"user_tz":-330,"elapsed":501,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"d6e69f04-f9e3-48cb-ce40-fae7f5a6fe20"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3\n"]}]},{"source":["class MyClass:\n","    def my_function(arg1, arg2): # Indent this line\n","        return arg1 + arg2 # Indent this line as well\n","\n","# You can call it directly using the class name\n","result = MyClass.my_function(1, 2)\n","print(result) # Output: 3"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BVJ1VWdSJ4lp","executionInfo":{"status":"ok","timestamp":1719314913166,"user_tz":-330,"elapsed":483,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"afb9c592-a78a-44a8-8665-9970e6b9477a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3\n"]}]},{"cell_type":"markdown","source":["#Using classmethod\n","If the method needs access to the class attributes but not instance attributes, use\n","classmethod ."],"metadata":{"id":"xPA0bk-zKAIh"}},{"cell_type":"markdown","source":["#Using Regular Methods\n","\n","In [117...\n","\n","In [119...\n","\n","In [122...\n","\n","If the method needs access to instance attributes, you'll need to create an instance of the class first."],"metadata":{"id":"8C0qTLb2K83V"}},{"source":["class MyClass:\n","    class_variable = 10  # Indent this line\n","\n","    @classmethod\n","    def my_function(cls, arg1):\n","        return cls.class_variable + arg1  # Indent this line as well\n","\n","# You can call it directly using the class name\n","result = MyClass.my_function(5)\n","print(result) # Output: 15"],"cell_type":"code","metadata":{"id":"EoKTwfk3Oh_m","executionInfo":{"status":"ok","timestamp":1719316142895,"user_tz":-330,"elapsed":490,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"4543616c-709a-48df-bf28-fefb643b1dfa","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["15\n"]}]},{"source":["class MyClass:\n","    def my_function(arg1, arg2): # Indent this line\n","        return arg1 + arg2 # Indent this line as well\n","\n","# You can call it directly using the class name\n","result = MyClass.my_function(1, 2)\n","print(result) # Output: 3"],"cell_type":"code","metadata":{"id":"4SZ8k9tJMLho","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1719316091822,"user_tz":-330,"elapsed":10,"user":{"displayName":"Ananya Mohanty","userId":"16124825928085113691"}},"outputId":"0c6080b8-4ca9-4217-9362-029b3e1514ab"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["3\n"]}]}]}